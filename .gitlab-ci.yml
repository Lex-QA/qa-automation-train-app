stages:
  - test
  - report
  - deploy

image: python:3.11

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  ALLURE_VERSION: "2.27.0"
  ALLURE_HOME: "$CI_PROJECT_DIR/allure"

cache:
  paths:
    - .cache/pip

before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  # allure-pytest — нужен pytest-плагин, но не CLI
  - pip install allure-pytest

test:
  stage: test
  script:
    # запускаем pytest, собираем allure-results
    - pytest --alluredir=allure-results
    # генерируем coverage.html
    - swagger-coverage-tool save-report
  artifacts:
    when: always
    paths:
      - allure-results/
      - coverage.html
    expire_in: 1 week

generate-report:
  stage: report
  image: ubuntu:22.04
  dependencies:
    - test
  before_script:
    # ставим Java и утилиты
    - apt-get update && apt-get install -y openjdk-17-jdk curl unzip xz-utils
    # скачиваем Allure CLI
    - curl -L -o allure.tgz "https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/allure-${ALLURE_VERSION}.tgz"
    - tar -xzf allure.tgz
    - mv "allure-${ALLURE_VERSION}" "$ALLURE_HOME"
    - export PATH="$ALLURE_HOME/bin:$PATH"
  script:
    - mkdir -p public
    # генерируем HTML из allure-results
    - allure generate allure-results --clean -o public
    # копируем coverage
    - cp coverage.html public/
  artifacts:
    paths:
      - public
    expire_in: 1 week

pages:
  stage: deploy
  dependencies:
    - generate-report
  script:
    - echo "Deploying to GitLab Pages"
  artifacts:
    paths:
      - public
  only:
    - main
